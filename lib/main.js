// Generated by CoffeeScript 1.8.0

/*
#===========================================================================================================



 .d8888b.  8888888888 8888888b.  888     888 8888888888 8888888b.
d88P  Y88b 888        888   Y88b 888     888 888        888   Y88b
Y88b.      888        888    888 888     888 888        888    888
 "Y888b.   8888888    888   d88P Y88b   d88P 8888888    888   d88P
    "Y88b. 888        8888888P"   Y88b d88P  888        8888888P"
      "888 888        888 T88b     Y88o88P   888        888 T88b
Y88b  d88P 888        888  T88b     Y888P    888        888  T88b
 "Y8888P"  8888888888 888   T88b     Y8P     8888888888 888   T88b



#===========================================================================================================
 */

(function() {
  var QUEUE, SOBA, TEXT, TRM, TYPES, alert, app, badge, debug, help, info, new_db, router, rpr, sb, sio_server, urge, warn, whisper,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TEXT = require('coffeenode-text');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'soba-level-server';

  info = TRM.get_logger('info', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  urge = TRM.get_logger('urge', badge);

  whisper = TRM.get_logger('whisper', badge);

  help = TRM.get_logger('help', badge);

  SOBA = require('soba-server');

  new_db = require('level');

  this.serve = function() {
    var server;
    return server = server.listen(port, function() {
      var host, port, _ref;
      help("server process running on Node v" + process.versions['node']);
      _ref = server.address(), host = _ref.address, port = _ref.port;
      return help("ソバ Server listening to http://" + host + ":" + port);
    });
  };

  QUEUE = {};

  QUEUE.new_queue = function() {
    var R;
    R = {
      'queue': [],
      'first-idx': null,
      'total-count': 0,
      'pending-count': 0
    };
    return R;
  };

  QUEUE.push = function(me, event) {
    me['queue'].push(event);
    me['total-count'] += 1;
    me['pending-count'] += 1;
    return me;
  };

  QUEUE.pull = function(me, handler) {
    var R;
    if (me['first-idx'] === null) {
      return null;
    }
    R = me['queue'].unsh(event);
    me['total-count'] += 1;
    return me;
  };

  if ((module.parent == null) || __indexOf.call(process.argv, 'serve') >= 0) {
    sb = SOBA.new_server();
    app = SOBA.get_app(sb);
    router = SOBA.get_router(sb);
    sio_server = SOBA.get_sio_server(sb);
    SOBA.serve(sb);
    sio_server.on('connection', (function(_this) {
      return function(socket) {
        var event_buffer, report_event_buffer;
        debug('©81uDb', 'connected');
        event_buffer = [];
        report_event_buffer = function() {
          var message;
          message = "event buffer for " + (SOBA.get_client_id(sb, socket)) + ": " + (rpr(event_buffer));
          info(message);
          return SOBA.emit_news(sb, 'event-buffer', message);
        };
        socket.on('get', function(P) {
          debug('get', P);
          event_buffer.push(['get', P]);
          return report_event_buffer();
        });
        return socket.on('put', function(P) {
          debug('put', P);
          event_buffer.push(['put', P]);
          return report_event_buffer();
        });
      };
    })(this));

    /*
    router.on 'get', ( socket, P, next ) =>
      debug 'get', P
      next()
    
    router.on 'put', ( socket, P, next ) =>
      debug 'put', P
      next()
     */
  }

}).call(this);
